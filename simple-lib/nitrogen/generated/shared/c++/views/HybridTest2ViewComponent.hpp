///
/// HybridTest2ViewComponent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <optional>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/NitroHash.hpp>
#include <NitroModules/CachedProp.hpp>
#include <react/renderer/core/ConcreteComponentDescriptor.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/components/view/ConcreteViewShadowNode.h>
#include <react/renderer/components/view/ViewProps.h>

#include <memory>
#include "HybridTest2ViewSpec.hpp"
#include <functional>
#include <optional>

namespace margelo::nitro::simplelib::views {

  using namespace facebook;

  /**
   * The name of the actual native View.
   */
  extern const char HybridTest2ViewComponentName[];

  /**
   * Props for the "Test2View" View.
   */
  class HybridTest2ViewProps final: public react::ViewProps {
  public:
    HybridTest2ViewProps() = default;
    HybridTest2ViewProps(const HybridTest2ViewProps&);
    HybridTest2ViewProps(const react::PropsParserContext& context,
                         const HybridTest2ViewProps& sourceProps,
                         const react::RawProps& rawProps);

  public:
    CachedProp<bool> enableFlash;
    CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridTest2ViewSpec>& /* ref */)>>> hybridRef;

  private:
    static bool filterObjectKeys(const std::string& propName);
  };

  /**
   * State for the "Test2View" View.
   */
  class HybridTest2ViewState final {
  public:
    HybridTest2ViewState() = default;

  public:
    void setProps(const HybridTest2ViewProps& props) { _props.emplace(props); }
    const std::optional<HybridTest2ViewProps>& getProps() const { return _props; }

  public:
#ifdef ANDROID
  HybridTest2ViewState(const HybridTest2ViewState& /* previousState */, folly::dynamic /* data */) {}
  folly::dynamic getDynamic() const {
    throw std::runtime_error("HybridTest2ViewState does not support folly!");
  }
  react::MapBuffer getMapBuffer() const {
    throw std::runtime_error("HybridTest2ViewState does not support MapBuffer!");
  };
#endif

  private:
    std::optional<HybridTest2ViewProps> _props;
  };

  /**
   * The Shadow Node for the "Test2View" View.
   */
  using HybridTest2ViewShadowNode = react::ConcreteViewShadowNode<HybridTest2ViewComponentName /* "HybridTest2View" */,
                                                                  HybridTest2ViewProps /* custom props */,
                                                                  react::ViewEventEmitter /* default */,
                                                                  HybridTest2ViewState /* custom state */>;

  /**
   * The Component Descriptor for the "Test2View" View.
   */
  class HybridTest2ViewComponentDescriptor final: public react::ConcreteComponentDescriptor<HybridTest2ViewShadowNode> {
  public:
    HybridTest2ViewComponentDescriptor(const react::ComponentDescriptorParameters& parameters);

  public:
    /**
     * A faster path for cloning props - reuses the caching logic from `HybridTest2ViewProps`.
     */
    std::shared_ptr<const react::Props> cloneProps(const react::PropsParserContext& context,
                                                   const std::shared_ptr<const react::Props>& props,
                                                   react::RawProps rawProps) const override;
#ifdef ANDROID
    void adopt(react::ShadowNode& shadowNode) const override;
#endif
  };

  /* The actual view for "Test2View" needs to be implemented in platform-specific code. */

} // namespace margelo::nitro::simplelib::views
