///
/// NitroSimpleLibAutolinking.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

public final class NitroSimpleLibAutolinking {
  public typealias bridge = margelo.nitro.simplelib.bridge.swift

  /**
   * Creates an instance of a Swift class that implements `HybridTest1Spec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridTest1Spec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridTest1`).
   */
  public static func createTest1() -> bridge.std__shared_ptr_HybridTest1Spec_ {
    let hybridObject = HybridTest1()
    return { () -> bridge.std__shared_ptr_HybridTest1Spec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
  
  /**
   * Creates an instance of a Swift class that implements `HybridTest2ViewSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridTest2ViewSpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridTest2View`).
   */
  public static func createTest2View() -> bridge.std__shared_ptr_HybridTest2ViewSpec_ {
    let hybridObject = HybridTest2View()
    return { () -> bridge.std__shared_ptr_HybridTest2ViewSpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
}
