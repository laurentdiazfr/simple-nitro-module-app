///
/// NitroSimpleLib-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridTest1Spec` to properly resolve imports.
namespace margelo::nitro::simplelib { class HybridTest1Spec; }
// Forward declaration of `HybridTest2ViewSpec` to properly resolve imports.
namespace margelo::nitro::simplelib { class HybridTest2ViewSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridTest1Spec_cxx` to properly resolve imports.
namespace NitroSimpleLib { class HybridTest1Spec_cxx; }
// Forward declaration of `HybridTest2ViewSpec_cxx` to properly resolve imports.
namespace NitroSimpleLib { class HybridTest2ViewSpec_cxx; }

// Include C++ defined types
#include "HybridTest1Spec.hpp"
#include "HybridTest2ViewSpec.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <memory>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::simplelib::bridge::swift {

  // pragma MARK: std::shared_ptr<HybridTest1Spec>
  /**
   * Specialized version of `std::shared_ptr<HybridTest1Spec>`.
   */
  using std__shared_ptr_HybridTest1Spec_ = std::shared_ptr<HybridTest1Spec>;
  std::shared_ptr<HybridTest1Spec> create_std__shared_ptr_HybridTest1Spec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridTest1Spec_(std__shared_ptr_HybridTest1Spec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridTest1Spec>
  using std__weak_ptr_HybridTest1Spec_ = std::weak_ptr<HybridTest1Spec>;
  inline std__weak_ptr_HybridTest1Spec_ weakify_std__shared_ptr_HybridTest1Spec_(const std::shared_ptr<HybridTest1Spec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<double>
  using Result_double_ = Result<double>;
  inline Result_double_ create_Result_double_(double value) noexcept {
    return Result<double>::withValue(std::move(value));
  }
  inline Result_double_ create_Result_double_(const std::exception_ptr& error) noexcept {
    return Result<double>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<HybridTest2ViewSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridTest2ViewSpec>`.
   */
  using std__shared_ptr_HybridTest2ViewSpec_ = std::shared_ptr<HybridTest2ViewSpec>;
  std::shared_ptr<HybridTest2ViewSpec> create_std__shared_ptr_HybridTest2ViewSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridTest2ViewSpec_(std__shared_ptr_HybridTest2ViewSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridTest2ViewSpec>
  using std__weak_ptr_HybridTest2ViewSpec_ = std::weak_ptr<HybridTest2ViewSpec>;
  inline std__weak_ptr_HybridTest2ViewSpec_ weakify_std__shared_ptr_HybridTest2ViewSpec_(const std::shared_ptr<HybridTest2ViewSpec>& strong) noexcept { return strong; }

} // namespace margelo::nitro::simplelib::bridge::swift
